CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

SET(PROJECT_NAME_STR scft)
PROJECT(${PROJECT_NAME_STR} C CXX)

### configuration

# custom find_package modules
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
# compiler flags
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

SET(PROJECT_LIB_NAME ${PROJECT_NAME_STR})
SET(PROJECT_APP_NAME "run${PROJECT_NAME_STR}")

### package configuration

# search for glog
FIND_PACKAGE(Glog REQUIRED)
INCLUDE_DIRECTORIES(${GLOG_INCLUDE_DIRS})

# search for fftw
FIND_PACKAGE(FFTW REQUIRED)
INCLUDE_DIRECTORIES(${FFTW_INCLUDES})

# search for matlab
# FIND_PACKAGE(MATLAB REQUIRED)

# wtf?
SET(CMAKE_EXPORT_COMPILE_COMMANDS "ON")

SET(COMMON_INCLUDES ${PROJECT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${COMMON_INCLUDES})


### target: libscft

FILE(GLOB SRC_FILES ${PROJECT_SOURCE_DIR}/src/scft/*.cpp)
FILE(GLOB HDR_FILES ${PROJECT_SOURCE_DIR}/include/scft/*.hpp)

ADD_LIBRARY(${PROJECT_LIB_NAME} ${SRC_FILES} ${HDR_FILES})
TARGET_LINK_LIBRARIES(${PROJECT_LIB_NAME}
    ${FFTW_LIBRARIES}
    ${GLOG_LIBRARIES}
)

### target main

ADD_EXECUTABLE(${PROJECT_APP_NAME} ${PROJECT_SOURCE_DIR}/src/main.cpp)
ADD_DEPENDENCIES(${PROJECT_APP_NAME} ${PROJECT_LIB_NAME})
TARGET_LINK_LIBRARIES(${PROJECT_APP_NAME}
    ${FFTW_LIBRARIES}
    ${GLOG_LIBRARIES}
    ${CMAKE_CURRENT_BINARY_DIR}/libscft.a
)

### target: test

ADD_SUBDIRECTORY(vendor/gtest EXCLUDE_FROM_ALL)

ENABLE_TESTING()
SET(PROJECT_TEST_NAME ${PROJECT_NAME_STR}_test)
INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIRS})

FILE(GLOB TEST_SRC_FILES ${PROJECT_SOURCE_DIR}/test/*.cxx)
ADD_EXECUTABLE(${PROJECT_TEST_NAME} EXCLUDE_FROM_ALL ${TEST_SRC_FILES})
ADD_DEPENDENCIES(${PROJECT_TEST_NAME} ${PROJECT_LIB_NAME})
ADD_DEPENDENCIES(${PROJECT_TEST_NAME} googletest)

TARGET_LINK_LIBRARIES(${PROJECT_TEST_NAME}
    ${GTEST_LIBS_DIR}/libgtest.a
    ${GTEST_LIBS_DIR}/libgtest_main.a
    ${FFTW_LIBRARIES}
    ${CMAKE_CURRENT_BINARY_DIR}/libscft.a
    pthread
)

ADD_TEST(test ${PROJECT_TEST_NAME})
ADD_CUSTOM_TARGET(verbose_test COMMAND ${PROJECT_TEST_NAME})

### target: doc

FIND_PACKAGE(Doxygen)
OPTION(BUILD_DOCUMENTATION "Use Doxygen to create the HTML based API
documentation" ${DOXYGEN_FOUND})
IF(BUILD_DOCUMENTATION)
    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/doc/Doxyfile.in
        ${PROJECT_BINARY_DIR}/doc/Doxyfile  @ONLY IMMEDIATE)

    ADD_CUSTOM_TARGET(doc COMMAND ${DOXYGEN_EXECUTABLE}
        ${PROJECT_BINARY_DIR}/doc/Doxyfile SOURCES
        ${PROJECT_BINARY_DIR}/doc/Doxyfile)
ENDIF()

